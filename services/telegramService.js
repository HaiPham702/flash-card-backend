const axios = require('axios');
const User = require('../models/User');
const Deck = require('../models/Deck');
const { GoogleGenerativeAI } = require('@google/generative-ai');

class TelegramService {
    constructor() {
        this.botToken = process.env.TELEGRAM_BOT_TOKEN;
        this.baseURL = `https://api.telegram.org/bot${this.botToken}`;
        
        // Initialize Gemini AI
        if (process.env.GEMINI_API_KEY) {
            this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            this.aiModel = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        } else {
            console.warn('‚ö†Ô∏è GEMINI_API_KEY not configured - AI examples disabled');
        }
        
        if (!this.botToken) {
            console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN not configured');
        }
    }

    // G·ª≠i tin nh·∫Øn text
    async sendMessage(chatId, text, options = {}) {
        try {
            const response = await axios.post(`${this.baseURL}/sendMessage`, {
                chat_id: chatId,
                text: text,
                parse_mode: options.parse_mode || 'Markdown',
                ...options
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i tin nh·∫Øn Telegram:', error.response?.data || error.message);
            throw error;
        }
    }

    // G·ª≠i ·∫£nh v·ªõi caption
    async sendPhoto(chatId, photo, caption = '', options = {}) {
        try {
            const response = await axios.post(`${this.baseURL}/sendPhoto`, {
                chat_id: chatId,
                photo: photo,
                caption: caption,
                parse_mode: options.parse_mode || 'Markdown',
                ...options
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i ·∫£nh Telegram:', error.response?.data || error.message);
            throw error;
        }
    }

    // L·∫•y th√¥ng tin c·∫≠p nh·∫≠t t·ª´ bot (ƒë·ªÉ l·∫•y danh s√°ch user ƒë√£ nh·∫Øn)
    async getUpdates(offset = 0) {
        try {
            const response = await axios.get(`${this.baseURL}/getUpdates`, {
                params: { offset }
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y updates:', error.response?.data || error.message);
            throw error;
        }
    }

    // ƒêƒÉng k√Ω user t·ª´ Telegram
    async registerTelegramUser(chatId, username, firstName, lastName) {
        try {
            // T√¨m user theo chatId ho·∫∑c t·∫°o m·ªõi
            let user = await User.findOne({ telegramChatId: chatId.toString() });
            
            if (!user) {
                // T·∫°o user m·ªõi v·ªõi th√¥ng tin t·ª´ Telegram
                user = new User({
                    name: `${firstName || ''} ${lastName || ''}`.trim() || username || `User${chatId}`,
                    email: `telegram_${chatId}@anki.local`, // Email t·∫°m th·ªùi
                    password: 'telegram_auth', // Password t·∫°m th·ªùi
                    telegramChatId: chatId.toString(),
                    telegramUsername: username,
                    telegramNotifications: {
                        enabled: true,
                        dailyReminder: true,
                        timePreference: '08:30'
                    }
                });
                await user.save();
                console.log(`‚úÖ ƒêƒÉng k√Ω user Telegram m·ªõi: ${user.name} (${chatId})`);
            } else {
                // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu user ƒë√£ t·ªìn t·∫°i
                user.telegramUsername = username;
                user.telegramNotifications.enabled = true;
                await user.save();
                console.log(`‚úÖ C·∫≠p nh·∫≠t user Telegram: ${user.name} (${chatId})`);
            }
            
            return user;
        } catch (error) {
            console.error('‚ùå L·ªói ƒëƒÉng k√Ω user Telegram:', error);
            throw error;
        }
    }

    // L·∫•y card ng·∫´u nhi√™n t·ª´ t·∫•t c·∫£ decks
    async getRandomCard() {
        try {
            const decks = await Deck.aggregate([
                { $match: { 'cards.0': { $exists: true } } }, // Ch·ªâ l·∫•y deck c√≥ card
                { $unwind: '$cards' },
                { $sample: { size: 1 } } // L·∫•y ng·∫´u nhi√™n 1 card
            ]);

            if (decks.length === 0) {
                return null;
            }

            const randomDeck = decks[0];
            return {
                deckName: randomDeck.name,
                card: randomDeck.cards
            };
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y card ng·∫´u nhi√™n:', error);
            return null;
        }
    }

    // T·∫°o v√≠ d·ª• s·ª≠ d·ª•ng t·ª´ v·ªõi AI
    async generateWordExample(word, meaning) {
        try {
            if (!this.aiModel) {
                return null; // AI kh√¥ng kh·∫£ d·ª•ng
            }

            const prompt = `T·∫°o m·ªôt v√≠ d·ª• c√¢u ƒë∆°n gi·∫£n v√† th·ª±c t·∫ø s·ª≠ d·ª•ng t·ª´ "${word}" c√≥ nghƒ©a l√† "${meaning}".
            
            Y√™u c·∫ßu:
            - C√¢u v√≠ d·ª• ph·∫£i ng·∫Øn g·ªçn (t·ªëi ƒëa 12 t·ª´)
            - D·ªÖ hi·ªÉu v√† th·ª±c t·∫ø
            - Th·ªÉ hi·ªán r√µ nghƒ©a c·ªßa t·ª´
            - Ch·ªâ tr·∫£ v·ªÅ c√¢u v√≠ d·ª•, kh√¥ng c·∫ßn gi·∫£i th√≠ch th√™m
            
            V√≠ d·ª• format: "She feels happy when she sees her friends."`;

            const result = await this.aiModel.generateContent(prompt);
            const example = result.response.text().trim();
            
            // Ki·ªÉm tra ƒë·ªô d√†i h·ª£p l√Ω
            if (example.length > 100 || example.length < 10) {
                console.warn(`‚ö†Ô∏è AI example too long/short for word "${word}": ${example}`);
                return null;
            }
            
            console.log(`‚úÖ Generated AI example for "${word}": ${example}`);
            return example;
            
        } catch (error) {
            console.error(`‚ùå L·ªói t·∫°o v√≠ d·ª• AI cho t·ª´ "${word}":`, error.message);
            return null;
        }
    }

    // Format tin nh·∫Øn card
    async formatCardMessage(deckName, card) {
        const front = card.front || 'Kh√¥ng c√≥ n·ªôi dung';
        const back = card.back || 'Kh√¥ng c√≥ n·ªôi dung';
        const pronunciation = card.pronunciation || '';
        
        let message = `üé¥ *Flashcard h√¥m nay*\n\n`;
        message += `üî§ *${front}* : ${back}\n`;
        
        if (pronunciation) {
            message += `\nüó£Ô∏è *Ph√°t √¢m:* /${pronunciation}/`;
        }
        
        // T·∫°o v√≠ d·ª• v·ªõi AI n·∫øu c√≥ t·ª´ v√† nghƒ©a
        if (front && back && front !== 'Kh√¥ng c√≥ n·ªôi dung' && back !== 'Kh√¥ng c√≥ n·ªôi dung') {
            try {
                const aiExample = await this.generateWordExample(front, back);
                if (aiExample) {
                    message += `\n\nüí° *V√≠ d·ª•:* ${aiExample}`;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o v√≠ d·ª• AI:', error.message);
            }
        }
        
        message += `\n\n‚è∞ H√£y √¥n t·∫≠p v√† h·ªçc t·ª´ m·ªõi m·ªói ng√†y nh√©! üìñ‚ú®`;
        
        return message;
    }

    // G·ª≠i card ng·∫´u nhi√™n cho m·ªôt user
    async sendRandomCardToUser(chatId) {
        try {
            const cardData = await this.getRandomCard();
            
            if (!cardData) {
                await this.sendMessage(chatId, 'üòÖ Hi·ªán t·∫°i ch∆∞a c√≥ flashcard n√†o. H√£y t·∫°o m·ªôt s·ªë card tr∆∞·ªõc nh√©!');
                return false;
            }

            const message = await this.formatCardMessage(cardData.deckName, cardData.card);

            // N·∫øu c√≥ ·∫£nh, g·ª≠i ·∫£nh v·ªõi caption
            if (cardData.card.image) {
                await this.sendPhoto(chatId, cardData.card.image, message);
            } else {
                await this.sendMessage(chatId, message);
            }

            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i card cho user ${chatId}:`, error);
            await this.sendMessage(chatId, 'üòÖ C√≥ l·ªói x·∫£y ra khi g·ª≠i flashcard. Vui l√≤ng th·ª≠ l·∫°i sau!');
            return false;
        }
    }

    // G·ª≠i th√¥ng b√°o h√†ng ng√†y cho t·∫•t c·∫£ user
    async sendDailyNotifications() {
        try {
            console.log('üöÄ B·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o h√†ng ng√†y...');
            
            // L·∫•y t·∫•t c·∫£ user c√≥ b·∫≠t th√¥ng b√°o Telegram
            const users = await User.find({
                'telegramNotifications.enabled': true,
                'telegramNotifications.dailyReminder': true,
                telegramChatId: { $exists: true, $ne: null }
            });

            if (users.length === 0) {
                console.log('üì≠ Kh√¥ng c√≥ user n√†o ƒëƒÉng k√Ω th√¥ng b√°o');
                return;
            }

            console.log(`üì¨ G·ª≠i th√¥ng b√°o cho ${users.length} users...`);

            let successCount = 0;
            let failCount = 0;

            // G·ª≠i song song cho t·ªëi ƒëa 5 user c√πng l√∫c ƒë·ªÉ tr√°nh rate limit
            const batchSize = 5;
            for (let i = 0; i < users.length; i += batchSize) {
                const batch = users.slice(i, i + batchSize);
                
                const promises = batch.map(async (user) => {
                    try {
                        const sent = await this.sendRandomCardToUser(user.telegramChatId);
                        if (sent) {
                            successCount++;
                            console.log(`‚úÖ G·ª≠i th√†nh c√¥ng cho ${user.name} (${user.telegramChatId})`);
                        } else {
                            failCount++;
                        }
                    } catch (error) {
                        failCount++;
                        console.error(`‚ùå L·ªói g·ª≠i cho ${user.name}:`, error.message);
                    }
                });

                await Promise.all(promises);
                
                // Delay gi·ªØa c√°c batch ƒë·ªÉ tr√°nh rate limit
                if (i + batchSize < users.length) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }

            console.log(`üéâ Ho√†n th√†nh g·ª≠i th√¥ng b√°o: ${successCount} th√†nh c√¥ng, ${failCount} th·∫•t b·∫°i`);
            return { success: successCount, failed: failCount };

        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o h√†ng ng√†y:', error);
            throw error;
        }
    }

    // X·ª≠ l√Ω tin nh·∫Øn t·ª´ user
    async handleMessage(message) {
        try {
            const chatId = message.chat.id;
            const text = message.text;
            const username = message.from.username;
            const firstName = message.from.first_name;
            const lastName = message.from.last_name;

            // ƒêƒÉng k√Ω user
            await this.registerTelegramUser(chatId, username, firstName, lastName);

            // X·ª≠ l√Ω commands
            if (text.startsWith('/start')) {
                const welcomeMessage = `üéâ *Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Anki Clone!*\n\n` +
                    `üîî B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o flashcard h√†ng ng√†y l√∫c 8:30 s√°ng.\n\n` +
                    `üìù *C√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng:*\n` +
                    `/card - L·∫•y m·ªôt flashcard ng·∫´u nhi√™n\n` +
                    `/stop - T·∫Øt th√¥ng b√°o h√†ng ng√†y\n` +
                    `/start - B·∫≠t l·∫°i th√¥ng b√°o\n\n` +
                    `üí° H√£y h·ªçc t·ª´ m·ªõi m·ªói ng√†y ƒë·ªÉ n√¢ng cao v·ªën t·ª´ v·ª±ng nh√©! üöÄ`;
                
                await this.sendMessage(chatId, welcomeMessage);
                
            } else if (text.startsWith('/card')) {
                await this.sendRandomCardToUser(chatId);
                
            } else if (text.startsWith('/stop')) {
                await User.updateOne(
                    { telegramChatId: chatId.toString() },
                    { 'telegramNotifications.enabled': false }
                );
                await this.sendMessage(chatId, 'üîï ƒê√£ t·∫Øt th√¥ng b√°o h√†ng ng√†y. G·ª≠i /start ƒë·ªÉ b·∫≠t l·∫°i.');
                
            } else {
                await this.sendMessage(chatId, 
                    'ü§ñ Xin ch√†o! G·ª≠i /card ƒë·ªÉ l·∫•y flashcard ng·∫´u nhi√™n, ho·∫∑c /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n.');
            }

        } catch (error) {
            console.error('‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn:', error);
        }
    }

    // Sync t·∫•t c·∫£ user t·ª´ getUpdates API
    async syncUsersFromUpdates() {
        try {
            console.log('üîÑ ƒê·ªìng b·ªô users t·ª´ Telegram Updates...');
            
            const updates = await this.getUpdates();
            const users = new Map(); // D√πng Map ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            
            if (updates.ok && updates.result) {
                updates.result.forEach(update => {
                    if (update.message && update.message.from) {
                        const user = update.message.from;
                        users.set(user.id, {
                            chatId: user.id,
                            username: user.username,
                            firstName: user.first_name,
                            lastName: user.last_name
                        });
                    }
                });
            }

            console.log(`üìä T√¨m th·∫•y ${users.size} users t·ª´ updates`);
            
            // ƒêƒÉng k√Ω t·∫•t c·∫£ users
            let registeredCount = 0;
            for (const userData of users.values()) {
                try {
                    await this.registerTelegramUser(
                        userData.chatId,
                        userData.username,
                        userData.firstName,
                        userData.lastName
                    );
                    registeredCount++;
                } catch (error) {
                    console.error(`‚ùå L·ªói ƒëƒÉng k√Ω user ${userData.chatId}:`, error.message);
                }
            }

            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${registeredCount} users`);
            return registeredCount;

        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªìng b·ªô users:', error);
            throw error;
        }
    }
}

module.exports = new TelegramService(); 