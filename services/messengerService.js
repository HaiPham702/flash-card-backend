const axios = require('axios');

class MessengerService {
    constructor() {
        this.PAGE_ACCESS_TOKEN = process.env.MESSENGER_PAGE_ACCESS_TOKEN;
        this.GRAPH_API_VERSION = 'v17.0';
        this.GRAPH_API_BASE = `https://graph.facebook.com/${this.GRAPH_API_VERSION}`;
    }

    // G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
    async sendTextMessage(recipientId, messageText) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const messageData = {
            recipient: { id: recipientId },
            message: { text: messageText }
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messages?access_token=${this.PAGE_ACCESS_TOKEN}`,
                messageData,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói g·ª≠i tin nh·∫Øn:', error.response?.data || error.message);
            throw error;
        }
    }

    // G·ª≠i tin nh·∫Øn v·ªõi quick replies
    async sendQuickReplies(recipientId, messageText, quickReplies) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const messageData = {
            recipient: { id: recipientId },
            message: {
                text: messageText,
                quick_replies: quickReplies
            }
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messages?access_token=${this.PAGE_ACCESS_TOKEN}`,
                messageData,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Quick replies ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói g·ª≠i quick replies:', error.response?.data || error.message);
            throw error;
        }
    }

    // G·ª≠i tin nh·∫Øn v·ªõi buttons
    async sendButtonMessage(recipientId, messageText, buttons) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const messageData = {
            recipient: { id: recipientId },
            message: {
                attachment: {
                    type: 'template',
                    payload: {
                        template_type: 'button',
                        text: messageText,
                        buttons: buttons
                    }
                }
            }
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messages?access_token=${this.PAGE_ACCESS_TOKEN}`,
                messageData,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Button message ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói g·ª≠i button message:', error.response?.data || error.message);
            throw error;
        }
    }

    // G·ª≠i tin nh·∫Øn v·ªõi generic template
    async sendGenericTemplate(recipientId, elements) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const messageData = {
            recipient: { id: recipientId },
            message: {
                attachment: {
                    type: 'template',
                    payload: {
                        template_type: 'generic',
                        elements: elements
                    }
                }
            }
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messages?access_token=${this.PAGE_ACCESS_TOKEN}`,
                messageData,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Generic template ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói g·ª≠i generic template:', error.response?.data || error.message);
            throw error;
        }
    }

    // C·∫•u h√¨nh Get Started Button
    async setGetStartedButton(payload = 'GET_STARTED') {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const data = {
            get_started: { payload }
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messenger_profile?access_token=${this.PAGE_ACCESS_TOKEN}`,
                data,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Get Started Button ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói c·∫•u h√¨nh Get Started Button:', error.response?.data || error.message);
            throw error;
        }
    }

    // C·∫•u h√¨nh Persistent Menu
    async setPersistentMenu(menuItems) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        const data = {
            persistent_menu: [
                {
                    locale: 'default',
                    composer_input_disabled: false,
                    call_to_actions: menuItems
                }
            ]
        };

        try {
            const response = await axios.post(
                `${this.GRAPH_API_BASE}/me/messenger_profile?access_token=${this.PAGE_ACCESS_TOKEN}`,
                data,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('Persistent Menu ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói c·∫•u h√¨nh Persistent Menu:', error.response?.data || error.message);
            throw error;
        }
    }

    // L·∫•y th√¥ng tin user
    async getUserInfo(userId) {
        if (!this.PAGE_ACCESS_TOKEN) {
            throw new Error('PAGE_ACCESS_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
        }

        try {
            const response = await axios.get(
                `${this.GRAPH_API_BASE}/${userId}?fields=first_name,last_name,profile_pic&access_token=${this.PAGE_ACCESS_TOKEN}`
            );

            console.log('Th√¥ng tin user:', response.data);
            return response.data;

        } catch (error) {
            console.error('L·ªói l·∫•y th√¥ng tin user:', error.response?.data || error.message);
            throw error;
        }
    }

    // X·ª≠ l√Ω tin nh·∫Øn d·ª±a tr√™n n·ªôi dung
    async handleIncomingMessage(senderId, messageText) {
        try {
            let responseText = '';
            let quickReplies = null;

            const lowerMessage = messageText.toLowerCase();

            if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
                responseText = 'Xin ch√†o! T√¥i l√† bot h·ªó tr·ª£ h·ªçc t·∫≠p. B·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn sau:';
                quickReplies = [
                    {
                        content_type: 'text',
                        title: 'üìö Flashcard',
                        payload: 'FLASHCARD'
                    },
                    {
                        content_type: 'text',
                        title: 'üìù Grammar',
                        payload: 'GRAMMAR'
                    },
                    {
                        content_type: 'text',
                        title: 'üó£Ô∏è Speaking',
                        payload: 'SPEAKING'
                    },
                    {
                        content_type: 'text',
                        title: '‚ùì Help',
                        payload: 'HELP'
                    }
                ];
            } else if (lowerMessage.includes('flashcard')) {
                responseText = 'üìö **Ch·ª©c nƒÉng Flashcard**\n\nH·ªçc t·ª´ v·ª±ng qua h·ªá th·ªëng th·∫ª th√¥ng minh:\n‚Ä¢ √în t·∫≠p theo thu·∫≠t to√°n spaced repetition\n‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p\n‚Ä¢ T√πy ch·ªânh b·ªô th·∫ª theo nhu c·∫ßu\n\nƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, vui l√≤ng truy c·∫≠p ·ª©ng d·ª•ng web c·ªßa ch√∫ng t√¥i!';
            } else if (lowerMessage.includes('grammar')) {
                responseText = 'üìù **Ch·ª©c nƒÉng Grammar**\n\nLuy·ªán t·∫≠p ng·ªØ ph√°p ti·∫øng Anh:\n‚Ä¢ B√†i t·∫≠p ƒëa d·∫°ng theo ch·ªß ƒë·ªÅ\n‚Ä¢ Gi·∫£i th√≠ch chi ti·∫øt\n‚Ä¢ Theo d√µi ƒëi·ªÉm s·ªë\n‚Ä¢ Luy·ªán t·∫≠p theo c·∫•p ƒë·ªô\n\nƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, vui l√≤ng truy c·∫≠p ·ª©ng d·ª•ng web c·ªßa ch√∫ng t√¥i!';
            } else if (lowerMessage.includes('speaking')) {
                responseText = 'üó£Ô∏è **Ch·ª©c nƒÉng Speaking**\n\nLuy·ªán n√≥i ti·∫øng Anh:\n‚Ä¢ Ch·ªß ƒë·ªÅ ƒëa d·∫°ng\n‚Ä¢ Ghi √¢m v√† ƒë√°nh gi√°\n‚Ä¢ Ph·∫£n h·ªìi t·ª´ AI\n‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô\n\nƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, vui l√≤ng truy c·∫≠p ·ª©ng d·ª•ng web c·ªßa ch√∫ng t√¥i!';
            } else if (lowerMessage.includes('help')) {
                responseText = '‚ùì **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**\n\n1. üìö **Flashcard**: H·ªçc t·ª´ v·ª±ng qua th·∫ª\n2. üìù **Grammar**: Luy·ªán t·∫≠p ng·ªØ ph√°p\n3. üó£Ô∏è **Speaking**: Luy·ªán n√≥i ti·∫øng Anh\n4. ‚úçÔ∏è **Writing**: Vi·∫øt v√† ƒë∆∞·ª£c ƒë√°nh gi√°\n\nƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, vui l√≤ng truy c·∫≠p ·ª©ng d·ª•ng web c·ªßa ch√∫ng t√¥i.\n\nB·∫°n c≈©ng c√≥ th·ªÉ g√µ:\n‚Ä¢ "hello" ƒë·ªÉ xem menu ch√≠nh\n‚Ä¢ "flashcard" ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ flashcard\n‚Ä¢ "grammar" ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ ng·ªØ ph√°p\n‚Ä¢ "speaking" ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ luy·ªán n√≥i';
            } else {
                responseText = 'C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! T√¥i ƒëang h·ªçc ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n.\n\nB·∫°n c√≥ th·ªÉ g√µ "help" ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ho·∫∑c "hello" ƒë·ªÉ xem menu ch√≠nh.';
            }

            if (quickReplies) {
                await this.sendQuickReplies(senderId, responseText, quickReplies);
            } else {
                await this.sendTextMessage(senderId, responseText);
            }

        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω tin nh·∫Øn:', error);
            await this.sendTextMessage(senderId, 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }

    // X·ª≠ l√Ω postback
    async handlePostback(senderId, payload, title) {
        try {
            let responseText = '';

            switch (payload) {
                case 'GET_STARTED':
                    responseText = 'üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng h·ªçc t·∫≠p!\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ H·ªçc t·ª´ v·ª±ng qua flashcard\n‚Ä¢ Luy·ªán t·∫≠p ng·ªØ ph√°p\n‚Ä¢ Luy·ªán n√≥i ti·∫øng Anh\n‚Ä¢ Vi·∫øt v√† ƒë∆∞·ª£c ƒë√°nh gi√°\n\nG√µ "help" ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt!';
                    break;
                case 'FLASHCARD':
                    responseText = 'üìö **Flashcard**\n\nH·ªçc t·ª´ v·ª±ng hi·ªáu qu·∫£ v·ªõi:\n‚Ä¢ Thu·∫≠t to√°n spaced repetition\n‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô\n‚Ä¢ B·ªô th·∫ª t√πy ch·ªânh\n\nTruy c·∫≠p ·ª©ng d·ª•ng web ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc ngay!';
                    break;
                case 'GRAMMAR':
                    responseText = 'üìù **Grammar Practice**\n\nLuy·ªán t·∫≠p ng·ªØ ph√°p v·ªõi:\n‚Ä¢ B√†i t·∫≠p ƒëa d·∫°ng\n‚Ä¢ Gi·∫£i th√≠ch chi ti·∫øt\n‚Ä¢ Theo d√µi ƒëi·ªÉm s·ªë\n\nTruy c·∫≠p ·ª©ng d·ª•ng web ƒë·ªÉ b·∫Øt ƒë·∫ßu luy·ªán t·∫≠p!';
                    break;
                case 'SPEAKING':
                    responseText = 'üó£Ô∏è **Speaking Practice**\n\nLuy·ªán n√≥i ti·∫øng Anh v·ªõi:\n‚Ä¢ Ch·ªß ƒë·ªÅ ƒëa d·∫°ng\n‚Ä¢ Ghi √¢m v√† ƒë√°nh gi√°\n‚Ä¢ Ph·∫£n h·ªìi t·ª´ AI\n\nTruy c·∫≠p ·ª©ng d·ª•ng web ƒë·ªÉ b·∫Øt ƒë·∫ßu luy·ªán n√≥i!';
                    break;
                case 'HELP':
                    responseText = '‚ùì **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**\n\n1. üìö **Flashcard**: H·ªçc t·ª´ v·ª±ng qua th·∫ª\n2. üìù **Grammar**: Luy·ªán t·∫≠p ng·ªØ ph√°p\n3. üó£Ô∏è **Speaking**: Luy·ªán n√≥i ti·∫øng Anh\n4. ‚úçÔ∏è **Writing**: Vi·∫øt v√† ƒë∆∞·ª£c ƒë√°nh gi√°\n\nƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng, vui l√≤ng truy c·∫≠p ·ª©ng d·ª•ng web c·ªßa ch√∫ng t√¥i.';
                    break;
                default:
                    responseText = 'C·∫£m ∆°n b·∫°n ƒë√£ t∆∞∆°ng t√°c! B·∫°n c√≥ th·ªÉ g√µ "help" ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.';
            }

            await this.sendTextMessage(senderId, responseText);

        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω postback:', error);
            await this.sendTextMessage(senderId, 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }
}

module.exports = new MessengerService(); 