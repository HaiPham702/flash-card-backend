const cron = require('node-cron');
const telegramService = require('./telegramService');

class SchedulerService {
    constructor() {
        this.jobs = new Map();
        this.isInitialized = false;
    }

    // Kh·ªüi t·∫°o scheduler
    init() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥');
            return;
        }

        console.log('üöÄ Kh·ªüi t·∫°o Telegram Scheduler Service...');

        // Cron job ch·∫°y m·ªói ng√†y l√∫c 8:30 AM
        // Format: gi√¢y ph√∫t gi·ªù ng√†y th√°ng th·ª©
        // '30 8 * * *' = 8:30 AM m·ªói ng√†y
        const dailyNotificationJob = cron.schedule('30 8 * * *', async () => {
            console.log('‚è∞ Ch·∫°y cron job g·ª≠i th√¥ng b√°o h√†ng ng√†y - 8:30 AM');
            
            try {
                const result = await telegramService.sendDailyNotifications();
                console.log(`‚úÖ Ho√†n th√†nh g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            } catch (error) {
                console.error('‚ùå L·ªói trong cron job g·ª≠i th√¥ng b√°o:', error);
            }
        }, {
            scheduled: false, // Ch∆∞a start ngay
            timezone: "Asia/Ho_Chi_Minh" // M√∫i gi·ªù Vi·ªát Nam
        });

        // L∆∞u job ƒë·ªÉ c√≥ th·ªÉ qu·∫£n l√Ω sau n√†y
        this.jobs.set('dailyNotifications', dailyNotificationJob);

        // Start job
        dailyNotificationJob.start();
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p cron job g·ª≠i th√¥ng b√°o h√†ng ng√†y l√∫c 8:30 AM (GMT+7)');

        // T√πy ch·ªçn: Cron job test g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t (ƒë·ªÉ test)
        // Uncomment d√≤ng d∆∞·ªõi n·∫øu mu·ªën test
        // this.setupTestJob();

        this.isInitialized = true;
    }

    // Setup job test (g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t) - ch·ªâ d√πng ƒë·ªÉ test
    setupTestJob() {
        console.log('üß™ Thi·∫øt l·∫≠p test job (g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t)...');
        
        const testJob = cron.schedule('*/5 * * * *', async () => {
            console.log('üß™ TEST: Ch·∫°y cron job test - m·ªói 5 ph√∫t');
            
            try {
                // Ch·ªâ g·ª≠i cho 1 user ƒë·∫ßu ti√™n ƒë·ªÉ test
                const User = require('../models/User');
                const testUser = await User.findOne({
                    'telegramNotifications.enabled': true,
                    telegramChatId: { $exists: true, $ne: null }
                });

                if (testUser) {
                    await telegramService.sendRandomCardToUser(testUser.telegramChatId);
                    console.log(`‚úÖ TEST: G·ª≠i th√†nh c√¥ng cho ${testUser.name}`);
                } else {
                    console.log('üì≠ TEST: Kh√¥ng c√≥ user n√†o ƒë·ªÉ test');
                }
            } catch (error) {
                console.error('‚ùå TEST: L·ªói trong test job:', error);
            }
        }, {
            scheduled: false,
            timezone: "Asia/Ho_Chi_Minh"
        });

        this.jobs.set('testNotifications', testJob);
        testJob.start();
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p test job (m·ªói 5 ph√∫t)');
    }

    // D·ª´ng job
    stopJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.stop();
            console.log(`‚èπÔ∏è ƒê√£ d·ª´ng job: ${jobName}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobName}`);
            return false;
        }
    }

    // Start job
    startJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.start();
            console.log(`‚ñ∂Ô∏è ƒê√£ start job: ${jobName}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobName}`);
            return false;
        }
    }

    // L·∫•y tr·∫°ng th√°i t·∫•t c·∫£ jobs
    getJobsStatus() {
        const status = {};
        for (const [name, job] of this.jobs) {
            status[name] = {
                running: job.running || false,
                scheduled: job.scheduled || false
            };
        }
        return status;
    }

    // G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c (manual trigger)
    async triggerDailyNotifications() {
        console.log('üîî Trigger th·ªß c√¥ng g·ª≠i th√¥ng b√°o h√†ng ng√†y...');
        try {
            const result = await telegramService.sendDailyNotifications();
            console.log(`‚úÖ Trigger th√†nh c√¥ng: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            return result;
        } catch (error) {
            console.error('‚ùå L·ªói trigger th·ªß c√¥ng:', error);
            throw error;
        }
    }

    // Thi·∫øt l·∫≠p job v·ªõi th·ªùi gian t√πy ch·ªânh
    setupCustomTimeJob(hour, minute) {
        const jobName = `customDaily_${hour}_${minute}`;
        
        // D·ª´ng job c≈© n·∫øu c√≥
        this.stopJob('dailyNotifications');
        
        // T·∫°o job m·ªõi
        const customJob = cron.schedule(`${minute} ${hour} * * *`, async () => {
            console.log(`‚è∞ Ch·∫°y cron job g·ª≠i th√¥ng b√°o t√πy ch·ªânh - ${hour}:${minute}`);
            
            try {
                const result = await telegramService.sendDailyNotifications();
                console.log(`‚úÖ Ho√†n th√†nh g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            } catch (error) {
                console.error('‚ùå L·ªói trong cron job t√πy ch·ªânh:', error);
            }
        }, {
            scheduled: true,
            timezone: "Asia/Ho_Chi_Minh"
        });

        this.jobs.set('dailyNotifications', customJob);
        console.log(`‚úÖ ƒê√£ thi·∫øt l·∫≠p job m·ªõi l√∫c ${hour}:${minute} (GMT+7)`);
        
        return jobName;
    }

    // Cleanup khi shutdown server
    destroy() {
        console.log('üõë D·ª´ng t·∫•t c·∫£ scheduled jobs...');
        for (const [name, job] of this.jobs) {
            job.destroy();
            console.log(`‚úÖ ƒê√£ cleanup job: ${name}`);
        }
        this.jobs.clear();
        this.isInitialized = false;
    }
}

// Export instance ƒë·ªÉ d√πng to√†n ·ª©ng d·ª•ng
module.exports = new SchedulerService(); 