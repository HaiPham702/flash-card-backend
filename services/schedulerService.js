const cron = require('node-cron');
const telegramService = require('./telegramService');

class SchedulerService {
    constructor() {
        this.jobs = new Map();
        this.isInitialized = false;
    }

    // Kh·ªüi t·∫°o scheduler
    init() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥');
            return;
        }

        console.log('üöÄ Kh·ªüi t·∫°o Telegram Scheduler Service...');

        // Thi·∫øt l·∫≠p multiple cron jobs: 8:30, 10:30, 12:30, 14:30, 16:30
        this.setupMultipleNotificationJobs();

        // T√πy ch·ªçn: Cron job test g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t (ƒë·ªÉ test)
        // Uncomment d√≤ng d∆∞·ªõi n·∫øu mu·ªën test
        // this.setupTestJob();

        this.isInitialized = true;
    }

    // Setup multiple notification jobs (c·ª© 2 ti·∫øng t·ª´ 8:30 ƒë·∫øn 17:00)
    setupMultipleNotificationJobs() {
        const schedules = [
            { time: '30 8 * * *', label: '8:30 AM' },
            { time: '30 10 * * *', label: '10:30 AM' },
            { time: '30 14 * * *', label: '2:30 PM' },
            { time: '30 16 * * *', label: '4:30 PM' },
            { time: '30 20 * * *', label: '8:30 PM' },
        ];

        schedules.forEach((schedule, index) => {
            const jobName = `notification_${schedule.label.replace(/[:\s]/g, '_')}`;
            
            const job = cron.schedule(schedule.time, async () => {
                console.log(`‚è∞ Ch·∫°y cron job g·ª≠i th√¥ng b√°o - ${schedule.label}`);
                
                try {
                    const result = await telegramService.sendDailyNotifications();
                    console.log(`‚úÖ [${schedule.label}] Ho√†n th√†nh g·ª≠i th√¥ng b√°o: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
                } catch (error) {
                    console.error(`‚ùå [${schedule.label}] L·ªói trong cron job:`, error);
                }
            }, {
                scheduled: true,
                timezone: "Asia/Ho_Chi_Minh"
            });

            this.jobs.set(jobName, job);
            console.log(`‚úÖ ƒê√£ thi·∫øt l·∫≠p cron job: ${schedule.label} (${schedule.time})`);
        });

        console.log(`üéØ Ho√†n th√†nh thi·∫øt l·∫≠p ${schedules.length} cron jobs (8:30 AM - 4:30 PM, c·ª© 2 ti·∫øng)`);
    }

    // Setup job test (g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t) - ch·ªâ d√πng ƒë·ªÉ test
    setupTestJob() {
        console.log('üß™ Thi·∫øt l·∫≠p test job (g·ª≠i th√¥ng b√°o m·ªói 5 ph√∫t)...');
        
        const testJob = cron.schedule('*/5 * * * *', async () => {
            console.log('üß™ TEST: Ch·∫°y cron job test - m·ªói 5 ph√∫t');
            
            try {
                // Ch·ªâ g·ª≠i cho 1 user ƒë·∫ßu ti√™n ƒë·ªÉ test
                const User = require('../models/User');
                const testUser = await User.findOne({
                    'telegramNotifications.enabled': true,
                    telegramChatId: { $exists: true, $ne: null }
                });

                if (testUser) {
                    await telegramService.sendRandomCardToUser(testUser.telegramChatId);
                    console.log(`‚úÖ TEST: G·ª≠i th√†nh c√¥ng cho ${testUser.name}`);
                } else {
                    console.log('üì≠ TEST: Kh√¥ng c√≥ user n√†o ƒë·ªÉ test');
                }
            } catch (error) {
                console.error('‚ùå TEST: L·ªói trong test job:', error);
            }
        }, {
            scheduled: false,
            timezone: "Asia/Ho_Chi_Minh"
        });

        this.jobs.set('testNotifications', testJob);
        testJob.start();
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p test job (m·ªói 5 ph√∫t)');
    }

    // D·ª´ng job
    stopJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.stop();
            console.log(`‚èπÔ∏è ƒê√£ d·ª´ng job: ${jobName}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobName}`);
            return false;
        }
    }

    // Start job
    startJob(jobName) {
        const job = this.jobs.get(jobName);
        if (job) {
            job.start();
            console.log(`‚ñ∂Ô∏è ƒê√£ start job: ${jobName}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobName}`);
            return false;
        }
    }

    // L·∫•y tr·∫°ng th√°i t·∫•t c·∫£ jobs
    getJobsStatus() {
        const status = {};
        for (const [name, job] of this.jobs) {
            status[name] = {
                running: job.running || false,
                scheduled: job.scheduled || false
            };
        }
        return status;
    }

    // G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c (manual trigger)
    async triggerDailyNotifications() {
        console.log('üîî Trigger th·ªß c√¥ng g·ª≠i th√¥ng b√°o h√†ng ng√†y...');
        try {
            const result = await telegramService.sendDailyNotifications();
            console.log(`‚úÖ Trigger th√†nh c√¥ng: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            return result;
        } catch (error) {
            console.error('‚ùå L·ªói trigger th·ªß c√¥ng:', error);
            throw error;
        }
    }

    // Thi·∫øt l·∫≠p job v·ªõi th·ªùi gian t√πy ch·ªânh
    setupCustomTimeJob(hour, minute) {
        const jobName = `customDaily_${hour}_${minute}`;
        
        // D·ª´ng job c≈© n·∫øu c√≥
        this.stopJob('dailyNotifications');
        
        // T·∫°o job m·ªõi
        const customJob = cron.schedule(`${minute} ${hour} * * *`, async () => {
            console.log(`‚è∞ Ch·∫°y cron job g·ª≠i th√¥ng b√°o t√πy ch·ªânh - ${hour}:${minute}`);
            
            try {
                const result = await telegramService.sendDailyNotifications();
                console.log(`‚úÖ Ho√†n th√†nh g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            } catch (error) {
                console.error('‚ùå L·ªói trong cron job t√πy ch·ªânh:', error);
            }
        }, {
            scheduled: true,
            timezone: "Asia/Ho_Chi_Minh"
        });

        this.jobs.set('dailyNotifications', customJob);
        console.log(`‚úÖ ƒê√£ thi·∫øt l·∫≠p job m·ªõi l√∫c ${hour}:${minute} (GMT+7)`);
        
        return jobName;
    }

    // L·∫•y danh s√°ch time slots hi·ªán t·∫°i
    getScheduleConfig() {
        const defaultSchedules = [
            { time: '30 8 * * *', label: '8:30 AM', enabled: true },
            { time: '30 10 * * *', label: '10:30 AM', enabled: true },
            { time: '30 12 * * *', label: '12:30 PM', enabled: true },
            { time: '30 14 * * *', label: '2:30 PM', enabled: true },
            { time: '30 16 * * *', label: '4:30 PM', enabled: true }
        ];

        return defaultSchedules.map(schedule => {
            const jobName = `notification_${schedule.label.replace(/[:\s]/g, '_')}`;
            const job = this.jobs.get(jobName);
            
            return {
                ...schedule,
                jobName,
                running: job ? job.running : false,
                scheduled: job ? job.scheduled : false
            };
        });
    }

    // Toggle enable/disable m·ªôt time slot c·ª• th·ªÉ
    toggleTimeSlot(timeLabel, enabled) {
        const jobName = `notification_${timeLabel.replace(/[:\s]/g, '_')}`;
        const job = this.jobs.get(jobName);

        if (!job) {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job: ${jobName}`);
            return false;
        }

        if (enabled) {
            job.start();
            console.log(`‚ñ∂Ô∏è ƒê√£ b·∫≠t job: ${timeLabel}`);
        } else {
            job.stop();
            console.log(`‚è∏Ô∏è ƒê√£ t·∫Øt job: ${timeLabel}`);
        }

        return true;
    }

    // C·∫≠p nh·∫≠t to√†n b·ªô schedule config
    updateScheduleConfig(scheduleConfig) {
        console.log('üîÑ C·∫≠p nh·∫≠t schedule configuration...');

        // D·ª´ng t·∫•t c·∫£ jobs hi·ªán t·∫°i
        for (const [name, job] of this.jobs) {
            if (name.startsWith('notification_')) {
                job.destroy();
                this.jobs.delete(name);
            }
        }

        // T·∫°o jobs m·ªõi theo config
        scheduleConfig.forEach(schedule => {
            if (schedule.enabled) {
                const jobName = `notification_${schedule.label.replace(/[:\s]/g, '_')}`;
                
                const job = cron.schedule(schedule.time, async () => {
                    console.log(`‚è∞ Ch·∫°y cron job g·ª≠i th√¥ng b√°o - ${schedule.label}`);
                    
                    try {
                        const result = await telegramService.sendDailyNotifications();
                        console.log(`‚úÖ [${schedule.label}] Ho√†n th√†nh g·ª≠i th√¥ng b√°o: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
                    } catch (error) {
                        console.error(`‚ùå [${schedule.label}] L·ªói trong cron job:`, error);
                    }
                }, {
                    scheduled: true,
                    timezone: "Asia/Ho_Chi_Minh"
                });

                this.jobs.set(jobName, job);
                console.log(`‚úÖ T·∫°o job m·ªõi: ${schedule.label} (${schedule.time})`);
            }
        });

        console.log('üéØ Ho√†n th√†nh c·∫≠p nh·∫≠t schedule configuration');
        return true;
    }

    // Th√™m time slot m·ªõi
    addCustomTimeSlot(time, label) {
        const jobName = `notification_${label.replace(/[:\s]/g, '_')}`;
        
        // Ki·ªÉm tra xem job ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (this.jobs.has(jobName)) {
            console.log(`‚ö†Ô∏è Job ƒë√£ t·ªìn t·∫°i: ${jobName}`);
            return false;
        }

        // Validate cron expression
        if (!cron.validate(time)) {
            console.log(`‚ùå Cron expression kh√¥ng h·ª£p l·ªá: ${time}`);
            return false;
        }

        const job = cron.schedule(time, async () => {
            console.log(`‚è∞ Ch·∫°y cron job custom - ${label}`);
            
            try {
                const result = await telegramService.sendDailyNotifications();
                console.log(`‚úÖ [${label}] Ho√†n th√†nh g·ª≠i th√¥ng b√°o: ${result?.success || 0} th√†nh c√¥ng, ${result?.failed || 0} th·∫•t b·∫°i`);
            } catch (error) {
                console.error(`‚ùå [${label}] L·ªói trong cron job:`, error);
            }
        }, {
            scheduled: true,
            timezone: "Asia/Ho_Chi_Minh"
        });

        this.jobs.set(jobName, job);
        console.log(`‚úÖ ƒê√£ th√™m custom time slot: ${label} (${time})`);
        return true;
    }

    // X√≥a time slot
    removeTimeSlot(timeLabel) {
        const jobName = `notification_${timeLabel.replace(/[:\s]/g, '_')}`;
        const job = this.jobs.get(jobName);

        if (job) {
            job.destroy();
            this.jobs.delete(jobName);
            console.log(`üóëÔ∏è ƒê√£ x√≥a job: ${timeLabel}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y job ƒë·ªÉ x√≥a: ${timeLabel}`);
            return false;
        }
    }

    // Cleanup khi shutdown server
    destroy() {
        console.log('üõë D·ª´ng t·∫•t c·∫£ scheduled jobs...');
        for (const [name, job] of this.jobs) {
            job.destroy();
            console.log(`‚úÖ ƒê√£ cleanup job: ${name}`);
        }
        this.jobs.clear();
        this.isInitialized = false;
    }
}

// Export instance ƒë·ªÉ d√πng to√†n ·ª©ng d·ª•ng
module.exports = new SchedulerService(); 