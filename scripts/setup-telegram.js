#!/usr/bin/env node

/**
 * üöÄ Quick Setup Script cho Telegram Bot
 * 
 * Script n√†y gi√∫p thi·∫øt l·∫≠p nhanh ch√≥ng Telegram bot cho Anki Clone
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

const log = {
    info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è ${msg}${colors.reset}`),
    success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
    error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
    warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è ${msg}${colors.reset}`),
    highlight: (msg) => console.log(`${colors.cyan}üîπ ${msg}${colors.reset}`),
    title: (msg) => console.log(`${colors.magenta}${colors.bright}${msg}${colors.reset}`)
};

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(`${colors.yellow}‚ùì ${prompt}${colors.reset}`, (answer) => {
            resolve(answer.trim());
        });
    });
}

async function setupTelegramBot() {
    log.title('ü§ñ THI·∫æT L·∫¨P TELEGRAM BOT CHO ANKI CLONE');
    console.log('='.repeat(60));
    
    log.info('Script n√†y s·∫Ω gi√∫p b·∫°n thi·∫øt l·∫≠p Telegram bot t·ª´ A-Z');
    console.log();

    // Step 1: H∆∞·ªõng d·∫´n t·∫°o bot
    log.highlight('B∆Ø·ªöC 1: T·∫°o Bot v·ªõi BotFather');
    console.log(`
1. M·ªü Telegram v√† t√¨m ki·∫øm: ${colors.cyan}@BotFather${colors.reset}
2. G·ª≠i l·ªánh: ${colors.cyan}/newbot${colors.reset}
3. Nh·∫≠p t√™n bot (v√≠ d·ª•: "Anki Clone Bot")
4. Nh·∫≠p username bot (ph·∫£i k·∫øt th√∫c b·∫±ng "bot", v√≠ d·ª•: "ankiclone_bot")
5. BotFather s·∫Ω cung c·∫•p Bot Token
`);

    const hasToken = await question('B·∫°n ƒë√£ c√≥ Bot Token ch∆∞a? (y/n): ');
    
    if (hasToken.toLowerCase() !== 'y') {
        log.warning('Vui l√≤ng t·∫°o bot v·ªõi @BotFather tr∆∞·ªõc khi ti·∫øp t·ª•c');
        log.info('Sau khi c√≥ token, ch·∫°y l·∫°i script n√†y');
        process.exit(0);
    }

    // Step 2: Nh·∫≠p Bot Token
    log.highlight('B∆Ø·ªöC 2: C·∫•u h√¨nh Bot Token');
    const botToken = await question('Nh·∫≠p Bot Token (t·ª´ @BotFather): ');
    
    if (!botToken || !botToken.includes(':')) {
        log.error('Bot Token kh√¥ng h·ª£p l·ªá! Format ƒë√∫ng: 123456789:AABBccddeeffgg...');
        process.exit(1);
    }

    // Step 3: Ki·ªÉm tra .env file
    log.highlight('B∆Ø·ªöC 3: C·∫•u h√¨nh Environment Variables');
    
    const envPath = path.join(__dirname, '../.env');
    let envContent = '';

    if (fs.existsSync(envPath)) {
        envContent = fs.readFileSync(envPath, 'utf8');
        log.info('File .env ƒë√£ t·ªìn t·∫°i, s·∫Ω c·∫≠p nh·∫≠t...');
    } else {
        log.info('T·∫°o file .env m·ªõi...');
        // T·∫°o .env c∆° b·∫£n
        envContent = `# Database Configuration
MONGODB_URI=mongodb://localhost:27017/flashcard-app

# JWT Secret
JWT_SECRET=your-secret-key-here

# Server Configuration
PORT=4000
NODE_ENV=development
`;
    }

    // Th√™m ho·∫∑c c·∫≠p nh·∫≠t TELEGRAM_BOT_TOKEN
    if (envContent.includes('TELEGRAM_BOT_TOKEN=')) {
        envContent = envContent.replace(/TELEGRAM_BOT_TOKEN=.*/, `TELEGRAM_BOT_TOKEN=${botToken}`);
        log.info('C·∫≠p nh·∫≠t TELEGRAM_BOT_TOKEN trong .env');
    } else {
        envContent += `\n# Telegram Bot Configuration\nTELEGRAM_BOT_TOKEN=${botToken}\n`;
        log.info('Th√™m TELEGRAM_BOT_TOKEN v√†o .env');
    }

    fs.writeFileSync(envPath, envContent);
    log.success('ƒê√£ c·∫•u h√¨nh .env file');

    // Step 4: Test Bot Token
    log.highlight('B∆Ø·ªöC 4: Ki·ªÉm tra Bot Token');
    
    try {
        const axios = require('axios');
        const response = await axios.get(`https://api.telegram.org/bot${botToken}/getMe`);
        
        if (response.data.ok) {
            const bot = response.data.result;
            log.success('Bot Token h·ª£p l·ªá!');
            log.highlight(`Bot Name: ${bot.first_name}`);
            log.highlight(`Username: @${bot.username}`);
            log.highlight(`ID: ${bot.id}`);
        } else {
            log.error('Bot Token kh√¥ng h·ª£p l·ªá');
            process.exit(1);
        }
    } catch (error) {
        log.error(`L·ªói ki·ªÉm tra bot: ${error.message}`);
        process.exit(1);
    }

    // Step 5: C·∫•u h√¨nh Bot Commands
    log.highlight('B∆Ø·ªöC 5: C·∫•u h√¨nh Bot Commands');
    
    const setupCommands = await question('C·∫•u h√¨nh commands cho bot? (y/n): ');
    
    if (setupCommands.toLowerCase() === 'y') {
        try {
            const axios = require('axios');
            const commands = [
                { command: 'start', description: 'B·∫Øt ƒë·∫ßu v√† ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o' },
                { command: 'card', description: 'L·∫•y m·ªôt flashcard ng·∫´u nhi√™n' },
                { command: 'stop', description: 'T·∫Øt th√¥ng b√°o h√†ng ng√†y' }
            ];

            const response = await axios.post(`https://api.telegram.org/bot${botToken}/setMyCommands`, {
                commands: commands
            });

            if (response.data.ok) {
                log.success('ƒê√£ c·∫•u h√¨nh commands cho bot');
            } else {
                log.warning('Kh√¥ng th·ªÉ c·∫•u h√¨nh commands, nh∆∞ng bot v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
            }
        } catch (error) {
            log.warning('L·ªói c·∫•u h√¨nh commands, b·ªè qua...');
        }
    }

    // Step 6: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    log.highlight('B∆Ø·ªöC 6: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng');
    
    console.log(`
üéâ ${colors.green}THI·∫æT L·∫¨P HO√ÄN TH√ÄNH!${colors.reset}

${colors.cyan}ƒê·ªÉ s·ª≠ d·ª•ng bot:${colors.reset}
1. Kh·ªüi ƒë·ªông server: ${colors.yellow}npm run dev${colors.reset}
2. M·ªü Telegram v√† t√¨m bot: ${colors.yellow}@${response.data?.result?.username || 'your_bot'}${colors.reset}
3. G·ª≠i l·ªánh: ${colors.yellow}/start${colors.reset}

${colors.cyan}T√≠nh nƒÉng c·ªßa bot:${colors.reset}
‚úÖ T·ª± ƒë·ªông g·ª≠i flashcard h√†ng ng√†y l√∫c 8:30 s√°ng
‚úÖ L·ªánh /card ƒë·ªÉ l·∫•y flashcard ng·∫´u nhi√™n
‚úÖ L·ªánh /stop ƒë·ªÉ t·∫Øt th√¥ng b√°o
‚úÖ T·ª± ƒë·ªông ƒëƒÉng k√Ω user khi nh·∫Øn tin

${colors.cyan}API qu·∫£n l√Ω (c·∫ßn JWT token):${colors.reset}
‚Ä¢ GET  /api/telegram/test - Ki·ªÉm tra bot
‚Ä¢ POST /api/telegram/send-daily-notifications - G·ª≠i th√¥ng b√°o th·ªß c√¥ng
‚Ä¢ POST /api/telegram/sync-users - ƒê·ªìng b·ªô users
‚Ä¢ GET  /api/telegram/stats - Xem th·ªëng k√™

${colors.cyan}Test bot:${colors.reset}
Ch·∫°y: ${colors.yellow}node scripts/test-telegram.js${colors.reset}

${colors.cyan}Xem h∆∞·ªõng d·∫´n chi ti·∫øt:${colors.reset}
ƒê·ªçc file: ${colors.yellow}TELEGRAM_BOT_SETUP.md${colors.reset}
`);

    // Step 7: Test ngay
    const testNow = await question('Test bot ngay b√¢y gi·ªù? (y/n): ');
    
    if (testNow.toLowerCase() === 'y') {
        log.info('Kh·ªüi ƒë·ªông test script...');
        console.log();
        
        try {
            const TelegramTester = require('./test-telegram');
            const tester = new TelegramTester();
            await tester.runInteractiveTest();
        } catch (error) {
            log.error(`L·ªói test: ${error.message}`);
            log.info('B·∫°n c√≥ th·ªÉ test sau b·∫±ng l·ªánh: node scripts/test-telegram.js');
        }
    }

    log.success('üéâ Thi·∫øt l·∫≠p ho√†n t·∫•t! Ch√∫c b·∫°n s·ª≠ d·ª•ng bot hi·ªáu qu·∫£!');
}

// Main execution
async function main() {
    try {
        await setupTelegramBot();
    } catch (error) {
        log.error(`L·ªói: ${error.message}`);
    } finally {
        rl.close();
        process.exit(0);
    }
}

// Check dependencies
function checkDependencies() {
    try {
        require('axios');
        return true;
    } catch (error) {
        log.error('Thi·∫øu dependency axios. Ch·∫°y: npm install axios');
        return false;
    }
}

// Run if called directly
if (require.main === module) {
    if (checkDependencies()) {
        main();
    } else {
        process.exit(1);
    }
}

module.exports = { setupTelegramBot }; 